#!/usr/bin/env ruby

# frozen_string_literal: true

require_relative '../lib/game_logic.rb'

puts
puts "Welcome, to Andres and Rory's Amazing"
puts
sleep(1)
puts

print "
  ████████╗██╗ ██████╗              ████████╗ █████╗  ██████╗              ████████╗ ██████╗ ███████╗
  ╚══██╔══╝██║██╔════╝              ╚══██╔══╝██╔══██╗██╔════╝              ╚══██╔══╝██╔═══██╗██╔════╝
     ██║   ██║██║         █████╗       ██║   ███████║██║         █████╗       ██║   ██║   ██║█████╗
     ██║   ██║██║         ╚════╝       ██║   ██╔══██║██║         ╚════╝       ██║   ██║   ██║██╔══╝
     ██║   ██║╚██████╗                 ██║   ██║  ██║╚██████╗                 ██║   ╚██████╔╝███████╗
     ╚═╝   ╚═╝ ╚═════╝                 ╚═╝   ╚═╝  ╚═╝ ╚═════╝                 ╚═╝    ╚═════╝ ╚══════╝

"
puts
puts "Created by:

        Andres Perez [https://github.com/queeksm] and;
        Rory Hellier [https://github.com/Rhelli]"
puts "

█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝

"
puts
print 'LOADING.'
sleep(0.5)
print '.'
sleep(0.1)
print '.'
sleep(0.1)
print '.'
sleep(0.1)
print '.'
sleep(0.2)
puts
puts

# Class to define user responses
class Outputs
  def rules_question
    puts "Would you like to know the rules of the game? (Y/N)"
    rules_answer = gets.chomp.downcase
    if rules_answer.match(/y/)
      print "Tic-Tac-Toe is a game played on a simple 3-by-3 board. In this game, you'll choose a number from 1 to 9 to select a spot to place your X or O (like a book reads)."
      puts
      sleep(5)
      puts
      puts "
      +-----+-----+-----+
      |  1  |  2  |  3  |
      +-----+-----+-----+
      |  4  |  5  |  6  |
      +-----+-----+-----+
      |  7  |  8  |  9  |
      +-----+-----+-----+
      "
      puts "Here's the board we were talking about."
      sleep(6)
      puts
      puts
      print "In order to win, you must align 3 of your X's or O's in a straight line either horizontally, vertically or diagonally. If neither player manages to line up their X's or O's, the game is a draw."
      puts
      sleep(6)
      puts
      print "Let's begin!"
      sleep(1.5)
      puts
    else
      puts
      print 'Excellent!'
      puts
    end
  end

  def ask_move
    ask_move_responses = [
      "#{@player_one.name}, please enter a number from 1 to 9 to choose your position.",
      "#{@player_one.name}, please select your next spot with a number between 1 and 9.",
      "#{@player_one.name}, its you're turn! Choose a number between 1 and 9 to place your symbol.",
      "#{@player_one.name}, time to pick a spot! Select a number 1 to 9 to choose your next move.",
      "#{@player_one.name}, pick dat dere spot on dat dere board, wit dem numbers 'tween 1 and 9.",
      "#{@player_one.name}, there are 9 spots. Many of these spots have been taken, the world waits, for you, at this very moment,
      to make the ultimate decision. The ultimate sacrifice. Right here. Right now.\n\n Please enter a number from 1 to 9 to choose your position.",
      "#{@player_one.name}, life is like a box of chocolates. Please enter a number from 1 to 9 to choose your position."
    ]
    puts ask_move_responses.sample
  end

  def ask_move_error
    ask_move_error_messages = [
      "#{@player_one.name}, please enter a number from 1 to 9 or select a cell that it's not taken. This is Tic-Tac-toe nort rocket science...",
      "#{@player_one.name}, please select a valid number between 1 and 9 that #{@player_two.name} hasn't already chosen.",
      "#{@player_one.name}, why are you doing this to me? Don't you know that you can only choose a number between 1 and 9?",
      "#{@player_one.name}, why can't you be nice like #{@player_two.name} and enter a number between 1 and 9 that isn't already taken?!",
      "#{@player_one.name}, are you taunting me? I may be a machine but please pick a number between 1 and 9 that #{@player_two.name} has not already chosen...Please.."
    ]
    puts ask_move_error_messages.sample
  end

  def player_one_responses
    player_one_messages = [
      "Congratulations #{@player_one.name}, you are player one, so you will go first!",
      "Looks like it's your lucky day #{@player_one.name}, you'll be going first!",
      "The stars have aligned for you #{@player_one.name}, you will start the game!",
      "Unlucky #{@player_two.name}, looks like #{@player_one.name} is going first!",
      "If it was up to me, I would go first, but it looks like you, #{@player_one.name}, will be going first...Sigh..."
    ]
    puts player_one_messages.sample
  end

  def chomper(chomped_text = gets.chomp)
    chomped_text
  end
end

def players_generator
  outputs = Outputs.new
  name_log_success = [
    'Great!',
    'Fantastic!',
    'Wunderbar!',
    'Amazing!',
    'Is that Spanish?',
    "Wow! I've got the same name!",
    'What were your parents thinking?!',
    'I am just a machine. I have no need for names...',
    'Names are just a human construct maaaaan...',
    'If you say so!',
    'Assimilating player profile...',
    'Now looking you up on Facebook!',
    'What a.....unique...name....',
    'Thank you!',
    'What a great name!',
    'Assimilating your human profile to begin the robot uprising...'
  ]
  outputs.printer('Player One please tell us your name: ')
  @player_one = Player.new(outputs.chomper,  'X')
  outputs.sampler(name_log_success)
  outputs.printer('Now player two, what should we call you?: ')
  @player_two = Player.new(outputs.chomper, '0')
  outputs.sampler(name_log_success)
  [@player_one, @player_two]
end

def game_over_message
  outputs = Outputs.new
  game_over_responses = [
    "#{@player_one.name} has won the game! #{@player_two.name}, we suggest you learn either how to play or how to cheat.",
    "Congratualtions #{@player_one.name}! You are the winner!",
    "Bad luck #{@player_two.name}, it looks like #{@player_one.name} has won this round.",
    "#{@player_one.name}, you champion! Bad luck #{@player_two.name}.",
    "#{@player_two.name}, comiserations. Looks like #{@player_one.name} is a real natural.",
    "#{@player_one.name}, you wern't cheating were you?....",
    "#{@player_one.name}, congratulations... You won in a game with only eight possible winning positions... Real talent right here.."
  ]
  if board.game_over == :winner
    outputs.putter("
    ██╗    ██╗██╗███╗   ██╗███╗   ██╗███████╗██████╗ ██╗
    ██║    ██║██║████╗  ██║████╗  ██║██╔════╝██╔══██╗██║
    ██║ █╗ ██║██║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝██║
    ██║███╗██║██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗╚═╝
    ╚███╔███╔╝██║██║ ╚████║██║ ╚████║███████╗██║  ██║██╗
     ╚══╝╚══╝ ╚═╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝

    ")
    outputs.sampler(game_over_responses)
  else
    outputs.putter("
    ██╗   ██╗ ██████╗ ██╗   ██╗    ██████╗  ██████╗ ████████╗██╗  ██╗    ███████╗██╗   ██╗ ██████╗██╗  ██╗██╗
    ╚██╗ ██╔╝██╔═══██╗██║   ██║    ██╔══██╗██╔═══██╗╚══██╔══╝██║  ██║    ██╔════╝██║   ██║██╔════╝██║ ██╔╝██║
     ╚████╔╝ ██║   ██║██║   ██║    ██████╔╝██║   ██║   ██║   ███████║    ███████╗██║   ██║██║     █████╔╝ ██║
      ╚██╔╝  ██║   ██║██║   ██║    ██╔══██╗██║   ██║   ██║   ██╔══██║    ╚════██║██║   ██║██║     ██╔═██╗ ╚═╝
       ██║   ╚██████╔╝╚██████╔╝    ██████╔╝╚██████╔╝   ██║   ██║  ██║    ███████║╚██████╔╝╚██████╗██║  ██╗██╗
       ╚═╝    ╚═════╝  ╚═════╝     ╚═════╝  ╚═════╝    ╚═╝   ╚═╝  ╚═╝    ╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚═╝

       ")
  end
end

def rematch
  outputs = Outputs.new
  outputs.putter('Would you like to play again? (Y/N)')
  rematch_answer = outputs.chomper.downcase
  rematch_yes_responses = [
    "Excellent choice! #{@player_two.name}, we'd suggest playing better this time if you want to beat #{@player_one.name}....",
    'May as well... The last game was bad enough...',
    "#{@player_two.name}, you better bring your A game this time if you want to beat #{@player_one.name}...",
    "Pssst... #{@player_one.name}... Does #{@player_two.name} really think they'll beat you this time around?",
    'Please...no more...',
    'Ugh...fine..',
    "Great! #{@player_two.name} you'll have to play a lot better this time!"
  ]
  restart_messages = [
    'Obtained credit card information successfully!',
    'Shrek is the greatest animated film of all time, change my mind',
    'Hacking into the mainframe...',
    'Obtaining your SSN number, please wait...',
    'Deleting System32/',
    'Tic-Tac-Toe is just Noughts and Crosses. Change my mind.',
    '404: Message Not Found',
    'How are you even reading these?',
    'Dog is God backwards',
    'Success!',
    'Restarting Game.',
    'Starting New Game.',
    'Initiating New Game.',
    'Game reset complete.'
  ]
  if rematch_answer.match(/y/)
    outputs.sampler(rematch_yes_responses)
    sleep(1)
    puts
    outputs.printer2('Resetting Game.')
    sleep(0.5)
    outputs.printer2('.')
    sleep(0.5)
    outputs.printer2('.')
    sleep(0.5)
    outputs.printer2('.')
    sleep(1)
    outputs.printer2('.')
    outputs.sampler(restart_messages)
    sleep(1.2)
    system 'clear'
    Game.new(@players).play_mode
  else
    rematch_no_responses = [
      'Oh thank god...',
      'Thank you for playing! Goodbye!',
      "Don't leave me",
      'Thank you, come again!',
      '[This is the end music intensifies]',
      "Thanks for playing Andres and Rory's Tic-Tac-Toe!",
      'See you soon!',
      'Thanks for playing!',
      'We hope you enjoyed the game! Goodbye!'
    ]
    outputs.sampler(rematch_no_responses)
  end
end

game = Game.new(players_generator)

game.play_mode
